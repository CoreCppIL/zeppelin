#-
#  id: 012
#  title: "Linux Security and Isolation APIs essentials"
#  description: >
#    <p><b>WORKSHOP</b></p>
#    <p>This course provides an overview of the low-level Linux features–set-UID programs, capabilities, namespaces, and control groups (v2)–that are used
#    to implement privileged applications and build container, virtualization, and sandboxing technologies. (The course does not cover systems such as
#    Docker and LXC, but participants will gain an an insight into the implementation and operation of such systems.)</p>
#    <p>The primary audience comprises designers and programmers building privileged applications, container applications, and sandboxing applications.
#    Systems administrators who manage such applications will also find the course of benefit. Participants should have some awareness of classical
#    Linux/UNIX concepts such as file descriptors and file I/O, signals, and the process lifecycle (fork(), exec(), wait(), exit()). In addition,
#    participants should have a reading knowledge of the C programming language. (Note, however, that the course exercises do not require writing any programs.)</p>
#    <p>Limited seats, <a href="https://ti.to/hamakor/core-cpp-2022/with/6t7udu7msda">register now</a>!</p>
#  subtype: workshop
#  speakers: [21]
#  language: en
-
  id: 002
  title: "Closing session"
  description: "TBD"
-
  id: 005
  title: "A lot of great C++ content!"
  description: "A lot of great C++ content!"
-
  id: 006
  title: "More activities"
  description: "In construction"
  service: true
-
  id: 007
  title: "Meetup & Lightning Talks"
  description: >
    <p>Join us for an open lightning talks event at the end of the first day of the Core C++ 2025 conference!</p>
    <p>A lightning talk event is an open stage for short talks. It’s an event where you and others get to talk about interesting topics for 5-10 minutes. Serious or funny, thoroughly prepared or mostly improvised, expert speaker or first-timer, conference participant or not - everyone is invited.</p>
    <p><b>We welcome talks that are broadly related to C++ development and to software development in general. Entertaining fast-paced talks are particularly welcome, this is a light-spirited event!</b></p>
    <p>The meetup is free for all, so join us and invite your colleagues! <br>Register and submit your lightning talk <a href="???">here.</a></p>
-
  id: 008
  title: "Great C++ content!"
  description: "To be published soon"
  service: true
-
  id: 099
  title: "Welcome to Core C++ 2025!"
  #place: "Weston::Auditorium"
  subtype: keynote
  service: true
-
  id: 1000
  title: ""
  service: true
-
  id: 101
  title: "Break"
  service: true
-
  id: 102
  title: "Lunch"
#  place: "Economics::Lobby"
  service: true
-
  id: 104
  title: "Updates"
  #place: "Weston::Auditorium"
  service: true
-
  id: 105
  title: "Closing Remarks"
  #place: "Weston::Auditorium"
  service: true
-
  id: 106
  title: "Registration and Coffee"
#  place: "Economics::Lobby"
  service: true
-
  id: 107
  title: "Coffee Break"
#  place: "Economics::Lobby"
  service: true
#  speakers: [30, 31]
-
  id: 108
  title: "Full-day workshops :: in construction"
  description: "To be announced soon"
-
  id: 11
  title: "Typing++ for C++ - Making the Compiler Do the Thinking"
  description: >
    <p>C++ lets us write powerful systems-and equally powerful bugs. Its weak typing gives us freedom, but not always safety.</p>
    <p>In this talk I'll argue that typing not a computing concept, but a linguistic one. By designing expressive types-from basic ints to rich class structures-we can shift from "I think this is right" to "I know this is right," catching errors at compile time instead of runtime.</p>
    <p>Expect practical examples, a few missteps (mine, mostly), and techniques to make your compiler a partner in correctness-not just a passive syntax checker.</p>
  speakers: [11]
  #language: Hebrew
-
  id: 12
  title: "Parallel Paths: From SIMD Lanes to Memory Highways in C++"
  description: >
    <p>In this talk, we will take a journey through two complementary ways to utilize hardware parallelism in C++. We will begin with SIMD (Single Instruction, Multiple Data), where one instruction processes a whole batch of values at once. The path will run from hand-written vectorized assembly, to compiler intrinsics, to libraries, and finally to auto-parallelization, with examples of what works, what doesn’t, and how to verify the compiler’s choices. We will see why SIMD shines in structured compute-bound code, and why it sometimes falls short.</p>
    <p>We will then broaden the scope to memory-level parallelism (MLP) - a hardware feature that overlaps multiple independent memory accesses to reduce overall latency. We will discuss how to take advantage of MLP in C++ through bulk operations and APIs, and show how this approach can bring substantial benefits even in less structured code with irregular memory access patterns.</p>
  speakers: [12]
  #language: Hebrew
-
  id: 13
  title: "C++ Contracts – a Meaningfully Viable Product"
  description: >
    <p>After 2 full decades of multiple efforts aimed at introducing a contracts feature into the C++ language, contracts have finally been voted into C++26 at the February 2026 C++ Standards Committee (WG21) meeting in Hagenberg, Austria. To be more precise – confirmation into the standard was given to the Contracts MVP – Minimal Viable Product. This talk will bring you the highlights of the MVP and if time allows also some forecasted features beyond it. We will shift our focus away from the theoretical background behind contracts and more into some select minutiae and pitfalls encountered along the tortuous process of developing this MVP, while also inspecting the most important things future contracts users should be aware of. And you can also expect some am(a/u)sement along the way!</p>
  speakers: [13]
  #language: Hebrew
-
  id: 14
  title: "Code Smarter: Harnessing AI tools for C++ Development"
  description: >
    <p>AI is everywhere. But how can we use it to make an impact?</p>
    <p>In this talk, we'll dive into how AI tools are changing the game for C++ developers. Drawing from real-world deployment experience within Microsoft, I’ll introduce you to a framework developed to rigorously analyze AI tools, and introduce practical use cases, unexpected challenges, and their applicability to C++ workflows.</p>
    <p>During the talk we’ll explore and get familiar with the latest available tools. We’ll also address limitations, best practices, and learn how to integrate these tools into production-level development environments.</p>
    <p>Whether you're skeptical or excited, this session will leave you with a grounded understanding of where AI tooling stands today, what it can (and can't) do for your C++ projects, and how to prepare for the next wave of innovation.</p>
  speakers: [14]
  #language: Hebrew
-
  id: 15
  title: "Who's Afraid of the Big Bad Template?"
  description: >
    <p>Many C++ developers can spend years, sometimes even a decade, without ever touching templates. In some workplaces, templates are even forbidden, treated as a dangerous curse requiring rare expertise.</p>
    <p>This fun talk takes that “terrifying” subject and shows that templates are not as scary as they seem, and can even become your friend. We’ll start with something seemingly intimidating like NTTPs (Non-Type Template Parameters) and slowly dive into more “monstrous” code examples. Step by step, every piece will be broken down and explained in detail, turning fear into understanding.</p>
    <p>This talk has only one requirement for attendance: a smile, so bring one with you :)</p>
  speakers: [15]
  #language: Hebrew
-
  id: 16
  title: "We got reflection - now what?"
  description: >
    <p>C++26 introduces new reflection capabilities into the language. In this talk we will explore some of the things that we can already do with these new capabilities, as well as some future enhancements that might prove useful.</p>
  speakers: [16]
  #language: Hebrew
-
  id: 17
  title: "C++ Pitfalls and Sharp Edges to Avoid"
  description: >
    <p>C++ is a powerful language, but with great power comes… plenty of pitfalls. Memory management quirks (even when using smart pointers), subtle undefined behaviors, and bug-prone code can silently introduce dangerous behaviors, only to surface at the worst possible moment in production. In this talk, we’ll explore some notorious C++ real life pitfalls and sharp edges, discussing strategies to avoid them and write safer, more resilient code.</p>
  speakers: [17]
  #language: Hebrew
-
  id: 18
  title: "Refactoring towards Structured Concurrency"
  description: >
    <p>The addition of "Senders and Receivers" (a.k.a <a href="https://en.cppreference.com/w/cpp/execution.html">execution</a>) to C++26 is a nudge for C++ practitioners to consider utilizing Structured Concurrency princinples when designing and implementing concurrent systems. Structured Concurrency is a well reasoned methodology, described by various C++ experts in the past, focused on composability, wide applicability, error tollerance and on correct fit with the rest of the language, most notably C++20 coroutines. The challenge that we'll face in this talk is that of taking existing concurrent and systems which were not originally designed with Structured Concurrency in mind, and making the gradual changes towards that design and towards more natural use of senders, receivers and coroutines. Join me in a tour of various techniques and tips for modernizing legacy concurrent systems, as we prepare for adopting the C++26 standard.</p>
  speakers: [18]
  #language: Hebrew
-
  id: 19
  title: "Managing dependencies with CMake"
  description: >
    <p>As modern C++ projects grow in complexity, effective dependency management becomes essential for maintaining code quality and ensuring seamless integration of external libraries.</p>
    <p>We will explore various strategies for defining, locating, and linking dependencies within CMake. Attendees will gain insights into best practices for organizing dependencies.</p>
    <p>We will highlight common pitfalls and provide solutions to streamline the dependency management process. By the end of the session, participants will be equipped with the knowledge and tools to effectively manage dependencies in their CMake-based projects, leading to improved build reliability and enhanced collaboration within development teams.</p>
  speakers: [19]
  #language: Hebrew
-
  id: 20
  title: "Welcome to the Museum of AI Hallucinations"
  description: >
    <p>We are going to explore the surprising creative potential of AI hallucinations in generative AI models like DALL-E. While typically viewed as flaws in deep learning, these "errors" can produce unexpected artistic brilliance. By comparing human imagination with AI’s pattern-based logic, the piece questions whether AI's falsehoods might actually be a new kind of creativity. It challenges how we define truth, error and inspiration in the age of artificial intelligence.</p>
  speakers: [20]
  #language: Hebrew
-
  id: 21
  title: "C++26 Contracts: Pitfalls to Watch"
  description: >
    <p>In this talk I'll describe a few already-known pitfalls in the new C++26 feature named contracts.</p>
    <p>While the Contract facility gives a good way to find bugs, still it bears a few already known pitfalls. The talk shows theoretical alongside practical pitfalls when using contracts. All examples in the talk are taken from existing compiler implementations and exiting code which is open sourced and can be further investigated by the audience.</p>
  speakers: [21]
  #language: Hebrew
-
  id: 1000
  title: "TITLE"
  description: >
    <p>DESC</p>
  speakers: [1000]
  #language: Hebrew
-
  id: 1000
  title: "TITLE"
  description: >
    <p>DESC</p>
  speakers: [1000]
  #language: Hebrew
-
  id: 1000
  title: "TITLE"
  description: >
    <p>DESC</p>
  speakers: [1000]
  #language: Hebrew
-
  id: 1000
  title: "TITLE"
  description: >
    <p>DESC</p>
  speakers: [1000]
  #language: Hebrew
